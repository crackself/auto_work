# 
# <https://github.com/crackself/auto_work>
# Copyright (C) 2024 crackself
#
name: OpenWrt_Image_Builder_For_x86-64

on:
  workflow_dispatch:  # 允许手动触发工作流
  # schedule:
  #   每周一凌晨 3:00 执行
  #   - cron: 00 03 * * 1

jobs:
  Build_Openwrt:

    name: Build OpenWrt Firmware
    runs-on: ubuntu-24.04
    # https://github.com/actions/runner-images#available-images
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: Space Cleanup
      # 清理储存空间
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 获取所有镜像的 ID
          images=$(docker images -q)

          # 检查镜像列表是否为空
          if [ -n "$images" ]; then
              echo "Removing Docker images..."
              docker rmi -f $images
            else
              echo "No Docker images to remove."
          fi

          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
      - name: Install Required Packages
      # 安装依赖工具
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h

      - name: Checkout Branch Sources
        uses: actions/checkout@v4
        # 使用说明https://github.com/actions/checkout
        with:
          # 指定分支 留空使用默认分支
          ref: ''

      - name: Get Current Stable OpenWrt Version
        run: |
          # 通过curl查找最新版本号
          stable_version=$(curl -s https://downloads.openwrt.org/ | grep -oP '(?<=releases/)[^/]+(?=/targets)' | head -n 1)
          
          echo "The latest stable OpenWrt version is: $stable_version"
          
          # 将版本号存入 GitHub Actions 环境变量
          echo "LATEST_STABLE_OPENWRT_VERSION=$stable_version" >> $GITHUB_ENV

      - name: Display Latest Stable OpenWrt Version
        run: |
          echo "The latest stable OpenWrt version is ${{ env.LATEST_STABLE_OPENWRT_VERSION }}"

      - name: Download Image Builder
        run: |
          # 使用 wget 下载指定的文件
          echo "Downloading Image_Builder tar file"
          wget https://downloads.openwrt.org/releases/${{ env.LATEST_STABLE_OPENWRT_VERSION }}/targets/x86/64/openwrt-imagebuilder-${{ env.LATEST_STABLE_OPENWRT_VERSION }}-x86-64.Linux-x86_64.tar.xz
          
          # 确保文件已成功下载
          echo "Show downloaded file"
          ls -lh openwrt-imagebuilder-${{ env.LATEST_STABLE_OPENWRT_VERSION }}-x86-64.Linux-x86_64.tar.xz

      - name: Untar Image Builder
        run: |
          # 解压ImageBuilder.tar.xz
          echo "Untar Image_Builder tar file"
          tar -J -x -f openwrt-imagebuilder-${{ env.LATEST_STABLE_OPENWRT_VERSION }}-x86-64.Linux-x86_64.tar.xz

          # 检查当前路径
          echo "Check current path"
          pwd

          # 显示当前路径文件
          echo "list current path files"
          ls

          echo "Remove tarball after untar"
          rm openwrt-imagebuilder-${{ env.LATEST_STABLE_OPENWRT_VERSION }}-x86-64.Linux-x86_64.tar.xz

          # 将文件路径存入 GitHub Actions 环境变量
          echo "SOURCES_PATH=openwrt-imagebuilder-${{ env.LATEST_STABLE_OPENWRT_VERSION }}-x86-64.Linux-x86_64" >> $GITHUB_ENV

      - name: Prepar Custom Files Directory
        run: |
          mkdir -pv {custom-files,custom-files/etc,custom-files/etc/uci-defaults}
          echo "Check current path"
          pwd

      - name: Copy First Boot Init Files Into Position
        run: |
          mv -v openwrt/99-custom custom-files/etc/uci-defaults/
          echo "Check custom-files/etc/uci-defaults/ files"
          ls custom-files/etc/uci-defaults

      - name: Prepar Openwrt Packages List
        run: |
          pwd
          ls
          # 获取删除列表+添加列表
          content=$(cat openwrt/del_packages openwrt/add_packages | tr '\n' ' ')
          echo "PACKAGES=$content" >> $GITHUB_ENV

      - name: Display Openwrt Packages List
        run: |
          echo "Combined package: $PACKAGES"
          echo "$PACKAGES"

      - name: Modify Image Configuration
        run: |
          echo "Prepar Shell File"
          mv openwrt/modify_config.sh ${{ env.SOURCES_PATH}}/

          echo "Go The o Sources Path"
          cd ${{ env.SOURCES_PATH}}
          
          echo "Execute
          bash openwrt/modify_config.sh

      - name: Generate Image...
        run: |
          echo "Check current path"
          pwd

          echo "Go to source path"
          cd ${{ env.SOURCES_PATH}}

          echo "Generating Image..."
          pwd
          make image PACKAGES="${{ env.PACKAGES}}" FILES="../custom-files"
          echo "Generate Compileted"

      - name: Prepare Artifact
      #创建目录：artifact,artifact/firmware,artifact/package,artifact/buildinfo
      # 移动bin/targets里的*.buildinfo文件到artifact/buildinfo目录，并命名为*.manifest
      # 复制bin/targets里的文件到artifact/firmware/目录
        run: |
          echo "Check current path"
          pwd

          echo "Prepare Artifact"
          mkdir -p {artifact,artifact/firmware,artifact/package,artifact/buildinfo}
          mv -fv $(find ${{ env.SOURCES_PATH}}/bin/targets -type f -name "*.buildinfo" -o -name "*.manifest") artifact/buildinfo/
          mv -fv $(find ${{ env.SOURCES_PATH}}/bin/targets -type f) artifact/firmware/
      - name: Upload Buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_buildinfo
          path: artifact/buildinfo/
      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.LATEST_STABLE_OPENWRT_VERSION }}-Firmware_x86-64
          path: artifact/firmware
